trigger:
  - ci-unify-helm
pr:
  - master

jobs:
    - job: Helm
      variables:
        commit: $(Build.SourceVersion)
        branch: $(Build.SourceBranch)
        kubernetesNamespace: 'iofog-helm-ci-$(Build.BuildId)'
        helmReleaseName: 'iofog-helm-ci-$(Build.BuildId)'

      pool:
        vmImage: 'Ubuntu-16.04'

      steps:
        - task: HelmDeploy@0
          displayName: 'Helm init'
          inputs:
            connectionType: Kubernetes Service Connection
            kubernetesServiceEndpoint: 'gke_focal-freedom-236620_asia-southeast1_lkrcal-6809978de35e5bad'
            namespace: $(kubernetesNamespace)
            command: init
            upgradetiller: false
            waitForExecution: true
            arguments: --client-only
        - task: Kubernetes@1
          displayName: 'Check custom resource definition exists'
          continueOnError: true
          inputs:
            connectionType: Kubernetes Service Connection
            kubernetesServiceEndpoint: 'gke_focal-freedom-236620_asia-southeast1_lkrcal-6809978de35e5bad'
            command: get
            arguments: crd iofogs.k8s.iofog.org -o jsonpath='{.metadata.uid}'
        - bash: |
            if [[ -z "${KUBERNETES_KUBECTLOUTPUT}" ]]; then
              echo '##vso[task.setvariable variable=CREATE_CUSTOM_RESOURCE]true'
            else
              echo '##vso[task.setvariable variable=CREATE_CUSTOM_RESOURCE]false'
            fi
        - task: HelmDeploy@0
          displayName: 'Helm install ioFog'
          timeoutInMinutes: 10
          inputs:
            connectionType: Kubernetes Service Connection
            kubernetesServiceEndpoint: 'gke_focal-freedom-236620_asia-southeast1_lkrcal-6809978de35e5bad'
            namespace: $(kubernetesNamespace)
            command: install
            arguments: --set createCustomResource=$(CREATE_CUSTOM_RESOURCE)
            chartType: FilePath
            chartPath: iofog
            releaseName: $(helmReleaseName)
        - task: Kubernetes@1
          displayName: 'Print all resources created'
          condition: always()
          inputs:
            connectionType: Kubernetes Service Connection
            kubernetesServiceEndpoint: 'gke_focal-freedom-236620_asia-southeast1_lkrcal-6809978de35e5bad'
            command: get
            arguments: all -n $(kubernetesNamespace)
        - task: HelmDeploy@0
          displayName: 'Helm delete'
          condition: always()
          continueOnError: true
          inputs:
            connectionType: Kubernetes Service Connection
            kubernetesServiceEndpoint: 'gke_focal-freedom-236620_asia-southeast1_lkrcal-6809978de35e5bad'
            command: delete
            arguments: '--purge $(helmReleaseName)'
#        TODO:
#        - Initialize agent
#        - Run test-runner
#        - Report test results
#        - Uninstall --purge helm (always)
#        - Collect all logs (always)
#        - Push release (only if on master)
#        - script: |
#            git config --global user.email "info@edgeworx.io"
#            git config --global user.name "Azure DevOps"
#            ./script/bootstrap.bash
#            ./script/push.bash 0.0.1 $(git.token)
#          displayName: 'Build and push'
#
#        - task: DockerInstaller@0
#          displayName: Docker Installer
#          inputs:
#            dockerVersion: 18.09.2
#            releaseType: stable
#
#        - script: |
#            echo $(gcp.svcacc) | docker login -u _json_key --password-stdin https://gcr.io
#          displayName: 'Docker connect to Registry'

